#!/usr/bin/env python

import rospy
import mavros
import sensor_msgs
import yaml
#from mavros.msg import *
from mavros_msgs.msg import *
from mavros_msgs.srv import *
from std_msgs.msg import String
from sensor_msgs.msg import NavSatFix

#global variables
latitude = 0.0
longitude = 0.0
altitude = 0.0
last_waypoint = False

def waypoint_callback(data):
	global last_waypoint
	#print("\n----------\nwaypoint_callback")
	rospy.loginfo("Got waypoint: %s", data)
	if len(data.waypoints) != 0:							#if waypoint list is not empty
		rospy.loginfo("is_current: %s", data.waypoints[len(data.waypoints)-1].is_current)
		last_waypoint = data.waypoints[len(data.waypoints)-1].is_current	#checks status of "is_current" for last waypoint

def globalPosition_callback(data):
	#print("\n----------\nglobalPosition_callback")
	global latitude
	global longitude
	global altitude
	latitude = data.latitude
	longitude = data.longitude
	altitude = data.altitude

def main():
	rospy.init_node('wayPoint')
	rospy.Subscriber("/mavros/mission/waypoints", WaypointList, waypoint_callback)
	rospy.Subscriber("/mavros/global_position/raw/fix", NavSatFix, globalPosition_callback)

	#Clearing waypoints
	print("\n----------CLEARING----------")
	rospy.wait_for_service("/mavros/mission/clear")
	print("Clearing Waypoints!!!")
	waypoint_clear = rospy.ServiceProxy("/mavros/mission/clear", WaypointClear)
	resp = waypoint_clear()
	print(resp)
	rospy.sleep(5)
	#Call waypoints_pull
	print("\n----------PULLING----------")
	rospy.wait_for_service("/mavros/mission/pull")
	print("Calling Waypoint_pull Service")
	waypoint_pull = rospy.ServiceProxy("/mavros/mission/pull", WaypointPull)
	resp = waypoint_pull()
	print(resp)
	rospy.sleep(5)
#	#Arming
#	print("\n----------ARMING----------")
#	rospy.wait_for_service("/mavros/cmd/arming")
#	print("Arming UAV!!!")
#	uav_arm = rospy.ServiceProxy("/mavros/cmd/arming", CommandBool)
#	resp = uav_arm(1)
#	print(resp)
#	rospy.sleep(5)

	#Sending waypoints_push
	print("\n----------PUSHING----------")
	print("Waiting for MAVROS service...")
	rospy.wait_for_service("/mavros/mission/push")
	waypoints = [
		Waypoint(frame = 3, command = 22, is_current = True, autocontinue = True, param1 = 5, x_lat = 37.197718, y_long = -80.580626, z_alt = 10),
		Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.197700, y_long = -80.580638, z_alt = 10),
		Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.197590, y_long = -80.580301, z_alt = 10),
		Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.197794, y_long = -80.580285, z_alt = 10),
		Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.197842, y_long = -80.580127, z_alt = 10),
		Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.197872, y_long = -80.580083, z_alt = 10),
		Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.197696, y_long = -80.580072, z_alt = 10),
		Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.197554, y_long = -80.580061, z_alt = 5)
	]
	waypoint_push = rospy.ServiceProxy("/mavros/mission/push", WaypointPush)
	resp = waypoint_push(waypoints)
	print(resp)
	rospy.sleep(5)
	
	while True:						#waits for last_waypoint in previous WaypointList to be visited
		rospy.sleep(2)
		print("WAITING for last_waypoint == True")
		if last_waypoint == True:			#if last_waypoint is in the process of being visited
			while True:
				rospy.sleep(2)
				print("WAITING for last_waypoint == False")
				if last_waypoint == False:	#if last_waypoint has been visited (due to previous constraint)
					break
			break
	
	#Clearing waypoints
	print("\n----------CLEARING----------")
	rospy.wait_for_service("/mavros/mission/clear")
	print("Clearing Waypoints!!!")
	waypoint_clear = rospy.ServiceProxy("/mavros/mission/clear", WaypointClear)
	resp = waypoint_clear()
	print(resp)
	rospy.sleep(5)
	#Call waypoints_pull
	print("\n----------PULLING----------")
	rospy.wait_for_service("/mavros/mission/pull")
	print("Calling Waypoint_pull Service")
	waypoint_pull = rospy.ServiceProxy("/mavros/mission/pull", WaypointPull)
	resp = waypoint_pull()
	print(resp)
	rospy.sleep(5)

	while True:
		rospy.sleep(2)
		print("WAITING for us to be within 1 meter of the next takeoff point")
		#print(" lat " + repr(latitude) + " long " + repr(longitude) + " alt " + repr(altitude))
		#latlongalt = (latitude-37.1973420)+(longitude-(-80.5798929))+(altitude-529)		#checks for total difference is less than 0.0001
		if (latitude-37.197554)<0.0001 and (longitude-(-80.580061))<0.0001:
			rospy.wait_for_service("/mavros/mission/push")
			resp = waypoint_push(waypoints)
			waypoints = [
				Waypoint(frame = 3, command = 22, is_current = True, autocontinue = True, param1 = 5, x_lat = 37.197554, y_long = -80.580061, z_alt = 10)
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.197512, y_long = -80.580049, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.197415, y_long = -80.579893, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.197359, y_long = -80.579854, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.197545, y_long = -80.579795, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.197668, y_long = -80.579549, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.197694, y_long = -80.579565, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.197977, y_long = -80.579613, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.197988, y_long = -80.579438, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198069, y_long = -80.579388, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198079, y_long = -80.579401, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198126, y_long = -80.579690, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.197993, y_long = -80.579824, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198024, y_long = -80.579842, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198065, y_long = -80.579823, z_alt = 5)
			]
			resp = waypoint_push(waypoints)
			print(resp)
			rospy.sleep(5)
			break

	while True:						#waits for last_waypoint in previous WaypointList to be visited
		rospy.sleep(2)
		print("WAITING for last_waypoint == True")
		if last_waypoint == True:			#if last_waypoint is in the process of being visited
			while True:
				rospy.sleep(2)
				print("WAITING for last_waypoint == False")
				if last_waypoint == False:	#if last_waypoint has been visited (due to previous constraint)
					break
			break
	
	#Clearing waypoints
	print("\n----------CLEARING----------")
	rospy.wait_for_service("/mavros/mission/clear")
	print("Clearing Waypoints!!!")
	waypoint_clear = rospy.ServiceProxy("/mavros/mission/clear", WaypointClear)
	resp = waypoint_clear()
	print(resp)
	rospy.sleep(5)
	#Call waypoints_pull
	print("\n----------PULLING----------")
	rospy.wait_for_service("/mavros/mission/pull")
	print("Calling Waypoint_pull Service")
	waypoint_pull = rospy.ServiceProxy("/mavros/mission/pull", WaypointPull)
	resp = waypoint_pull()
	print(resp)
	rospy.sleep(5)

	while True:
		rospy.sleep(2)
		print("WAITING for us to be within 1 meter of the next takeoff point")
		#print(" lat " + repr(latitude) + " long " + repr(longitude) + " alt " + repr(altitude))
		if (latitude-37.198065)<0.0001 and (longitude-(-80.579823))<0.0001:
			rospy.wait_for_service("/mavros/mission/push")
			resp = waypoint_push(waypoints)
			waypoints = [
				Waypoint(frame = 3, command = 22, is_current = True, autocontinue = True, param1 = 5, x_lat = 37.198065, y_long = -80.579823, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198204, y_long = -80.579975, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198088, y_long = -80.580087, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198100, y_long = -80.580172, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198070, y_long = -80.580356, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198141, y_long = -80.580449, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198168, y_long = -80.580401, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198338, y_long = -80.580189, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198539, y_long = -80.579926, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198602, y_long = -80.579923, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198570, y_long = -80.579754, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198643, y_long = -80.579668, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198552, y_long = -80.579690, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198438, y_long = -80.579767, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198452, y_long = -80.579670, z_alt = 5)
			]
			resp = waypoint_push(waypoints)
			print(resp)
			rospy.sleep(5)
			break

	while True:						#waits for last_waypoint in previous WaypointList to be visited
		rospy.sleep(2)
		print("WAITING for last_waypoint == True")
		if last_waypoint == True:			#if last_waypoint is in the process of being visited
			while True:
				rospy.sleep(2)
				print("WAITING for last_waypoint == False")
				if last_waypoint == False:	#if last_waypoint has been visited (due to previous constraint)
					break
			break
	
	#Clearing waypoints
	print("\n----------CLEARING----------")
	rospy.wait_for_service("/mavros/mission/clear")
	print("Clearing Waypoints!!!")
	waypoint_clear = rospy.ServiceProxy("/mavros/mission/clear", WaypointClear)
	resp = waypoint_clear()
	print(resp)
	rospy.sleep(5)
	#Call waypoints_pull
	print("\n----------PULLING----------")
	rospy.wait_for_service("/mavros/mission/pull")
	print("Calling Waypoint_pull Service")
	waypoint_pull = rospy.ServiceProxy("/mavros/mission/pull", WaypointPull)
	resp = waypoint_pull()
	print(resp)
	rospy.sleep(5)

	while True:
		rospy.sleep(2)
		print("WAITING for us to be within 1 meter of the next takeoff point")
		#print(" lat " + repr(latitude) + " long " + repr(longitude) + " alt " + repr(altitude))
		if (latitude-37.198452)<0.0001 and (longitude-(-80.579670))<0.0001:
			rospy.wait_for_service("/mavros/mission/push")
			resp = waypoint_push(waypoints)
			waypoints = [
				Waypoint(frame = 3, command = 22, is_current = True, autocontinue = True, param1 = 5, x_lat = 37.198452, y_long = -80.579670, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198326, y_long = -80.579543, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198301, y_long = -80.579536, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198254, y_long = -80.579445, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198303, y_long = -80.579363, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198462, y_long = -80.579403, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198425, y_long = -80.579267, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198413, y_long = -80.579204, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198517, y_long = -80.579028, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198461, y_long = -80.578958, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198585, y_long = -80.578936, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198640, y_long = -80.578925, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198927, y_long = -80.579145, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198985, y_long = -80.579185, z_alt = 10),
				Waypoint(frame = 3, command = 16, is_current = False, autocontinue = True, param1 = 5, x_lat = 37.198750, y_long = -80.579412, z_alt = 5)

			]
			resp = waypoint_push(waypoints)
			print(resp)
			rospy.sleep(5)
			break

	while True:						#waits for last_waypoint in previous WaypointList to be visited
		rospy.sleep(2)
		print("WAITING for last_waypoint == True")
		if last_waypoint == True:			#if last_waypoint is in the process of being visited
			while True:
				rospy.sleep(2)
				print("WAITING for last_waypoint == False")
				if last_waypoint == False:	#if last_waypoint has been visited (due to previous constraint)
					break
			break

	print("EVERYTHING WORKED AS PLANNED!!!")
	rospy.spin()

	


if __name__ == '__main__':
	main()

